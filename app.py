import tkinter as tk
import speech_recognition as sr
import threading
import pyaudio

class SubtitleApp:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.is_listening = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ GUI
        self.root = tk.Tk()
        self.root.title("üéß –°—É–±—Ç–∏—Ç—Ä—ã –∏–∑ –¥–∏–Ω–∞–º–∏–∫–æ–≤")
        self.root.geometry("900x300")
        self.root.configure(bg="black")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        self.label = tk.Label(
            self.root, 
            text="üé∂ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é...", 
            font=("Helvetica", 20), 
            fg="lime", 
            bg="black", 
            wraplength=860, 
            justify="center"
        )
        self.label.pack(expand=True, pady=20)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(
            self.root, 
            text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –Ω–∞—á–∞–ª–∞", 
            font=("Helvetica", 12), 
            fg="yellow", 
            bg="black"
        )
        self.status_label.pack(side=tk.BOTTOM, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.button_frame = tk.Frame(self.root, bg="black")
        self.button_frame.pack(side=tk.BOTTOM, pady=10)
        
        self.start_button = tk.Button(
            self.button_frame, 
            text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", 
            command=self.start_listening,
            bg="green", 
            fg="white", 
            font=("Helvetica", 12)
        )
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = tk.Button(
            self.button_frame, 
            text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
            command=self.stop_listening,
            bg="red", 
            fg="white", 
            font=("Helvetica", 12),
            state=tk.DISABLED
        )
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        self.devices_button = tk.Button(
            self.button_frame, 
            text="üé§ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", 
            command=self.show_devices,
            bg="blue", 
            fg="white", 
            font=("Helvetica", 12)
        )
        self.devices_button.pack(side=tk.LEFT, padx=5)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        self.device_index = None
        
    def get_audio_devices(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        p = pyaudio.PyAudio()
        devices = []
        
        for i in range(p.get_device_count()):
            info = p.get_device_info_by_index(i)
            # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã, —Å—Ç–µ—Ä–µ–æ –º–∏–∫—Å)
            if info['maxInputChannels'] > 0:
                devices.append({
                    'index': i,
                    'name': info['name'],
                    'channels': info['maxInputChannels']
                })
        
        p.terminate()
        return devices
    
    def show_devices(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        devices_window = tk.Toplevel(self.root)
        devices_window.title("–í—ã–±–æ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        devices_window.geometry("600x400")
        devices_window.configure(bg="gray20")
        
        tk.Label(
            devices_window, 
            text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ (–°—Ç–µ—Ä–µ–æ –º–∏–∫—Å / Stereo Mix):",
            font=("Helvetica", 14),
            fg="white",
            bg="gray20"
        ).pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        listbox = tk.Listbox(
            devices_window,
            font=("Courier", 10),
            bg="gray10",
            fg="white",
            selectbackground="blue"
        )
        listbox.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        devices = self.get_audio_devices()
        for device in devices:
            listbox.insert(tk.END, f"[{device['index']}] {device['name']} (–∫–∞–Ω–∞–ª—ã: {device['channels']})")
        
        def select_device():
            selection = listbox.curselection()
            if selection:
                self.device_index = devices[selection[0]]['index']
                device_name = devices[selection[0]]['name']
                self.status_label.config(text=f"–í—ã–±—Ä–∞–Ω–æ: {device_name}")
                devices_window.destroy()
        
        tk.Button(
            devices_window,
            text="–í—ã–±—Ä–∞—Ç—å",
            command=select_device,
            bg="green",
            fg="white",
            font=("Helvetica", 12)
        ).pack(pady=10)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = tk.Text(
            devices_window,
            height=6,
            font=("Helvetica", 9),
            bg="gray30",
            fg="white",
            wrap=tk.WORD
        )
        instruction.pack(fill=tk.X, padx=20, pady=10)
        instruction.insert(tk.END, 
            "–í–ê–ñ–ù–û: –î–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å '–°—Ç–µ—Ä–µ–æ –º–∏–∫—Å':\n"
            "1. –©–µ–ª–∫–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –ø–æ –∑–Ω–∞—á–∫—É –∑–≤—É–∫–∞ –≤ —Ç—Ä–µ–µ\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ó–≤—É–∫–∏' ‚Üí '–ó–∞–ø–∏—Å—å'\n"
            "3. –©–µ–ª–∫–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π ‚Üí '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'\n"
            "4. –í–∫–ª—é—á–∏—Ç–µ '–°—Ç–µ—Ä–µ–æ –º–∏–∫—Å' –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "5. –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ"
        )
        instruction.config(state=tk.DISABLED)
    
    def start_listening(self):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"""
        if self.device_index is None:
            self.status_label.config(text="‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!")
            return
            
        self.is_listening = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.label.config(text="üéß –°–ª—É—à–∞—é —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫...")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.listen_thread = threading.Thread(target=self.recognize_loop, daemon=True)
        self.listen_thread.start()
    
    def stop_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"""
        self.is_listening = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.label.config(text="‚èπÔ∏è –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def recognize_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            mic = sr.Microphone(device_index=self.device_index)
            
            with mic as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
                self.status_label.config(text="‚úÖ –°–ª—É—à–∞—é...")
                
                while self.is_listening:
                    try:
                        # –°–ª—É—à–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        audio = self.recognizer.listen(source, timeout=1, phrase_time_limit=5)
                        
                        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                        text = self.recognizer.recognize_google(audio, language="ru-RU")
                        print(f"üó£Ô∏è {text}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        self.root.after(0, lambda: self.label.config(text=text))
                        
                    except sr.WaitTimeoutError:
                        # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
                        pass
                    except sr.UnknownValueError:
                        # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
                        self.root.after(0, lambda: self.label.config(text="üò∂ –ù–µ –ø–æ–Ω—è–ª..."))
                    except sr.RequestError as e:
                        # –û—à–∏–±–∫–∞ API
                        self.root.after(0, lambda: self.label.config(text=f"‚ùå –û—à–∏–±–∫–∞ API: {e}"))
                        break
                        
        except OSError as e:
            self.root.after(0, lambda: self.status_label.config(text=f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}"))
            self.root.after(0, self.stop_listening)
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.mainloop()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = SubtitleApp()
    app.run()